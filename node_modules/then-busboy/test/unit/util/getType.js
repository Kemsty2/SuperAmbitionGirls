"use strict";

var _util = require("util");

var _ava = _interopRequireDefault(require("ava"));

var _getType = _interopRequireDefault(require("../../../lib/util/getType"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava.default)("Should return a string with type name", t => {
  t.plan(2);
  const res = (0, _getType.default)({});
  t.true((0, _util.isString)(res));
  t.is(res, "object");
});
(0, _ava.default)("Should return lowercased string for all basic types", t => {
  t.plan(8);
  const boolean = (0, _getType.default)(false);
  const nullType = (0, _getType.default)(null);
  const undefType = (0, _getType.default)(undefined);
  const string = (0, _getType.default)("string");
  const number = (0, _getType.default)(451);
  const array = (0, _getType.default)([]);
  const func = (0, _getType.default)(() => {});
  const object = (0, _getType.default)({});
  t.is(boolean, "boolean");
  t.is(nullType, "null");
  t.is(undefType, "undefined");
  t.is(string, "string");
  t.is(number, "number");
  t.is(array, "array");
  t.is(func, "function");
  t.is(object, "object");
});
(0, _ava.default)("Should return as-is name for non-basic types", t => {
  t.plan(3);
  const genFn = (0, _getType.default)(function* () {
    yield 0;
  });
  const set = (0, _getType.default)(new Set());
  const map = (0, _getType.default)(new Map());
  t.is(genFn, "GeneratorFunction");
  t.is(set, "Set");
  t.is(map, "Map");
});