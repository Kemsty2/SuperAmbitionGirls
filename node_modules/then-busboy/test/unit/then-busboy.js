"use strict";

var _ava = _interopRequireDefault(require("ava"));

var _supertest = _interopRequireDefault(require("supertest"));

var _promiseFs = require("promise-fs");

var _isPlainObject = _interopRequireDefault(require("../../lib/util/isPlainObject"));

var _thenBusboy = _interopRequireDefault(require("../../lib/then-busboy"));

var _mockHeader = _interopRequireDefault(require("../helper/mockHeader"));

var _mockRequest = _interopRequireDefault(require("../helper/mockRequest"));

var _mockServer = _interopRequireDefault(require("../helper/mockServer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava.default)("Should return a Promise", t => {
  t.plan(1);
  const req = (0, _mockRequest.default)();
  const res = (0, _thenBusboy.default)(req);
  t.true(res instanceof Promise);
  req.emit("end");
});
(0, _ava.default)("Should just resolve a plain object", async t => {
  t.plan(1);
  const {
    body
  } = await (0, _supertest.default)((0, _mockServer.default)(_thenBusboy.default)()).post("/").set("content-type", _mockHeader.default);
  t.true((0, _isPlainObject.default)(body));
});
(0, _ava.default)("Should return an expected object", async t => {
  t.plan(1);
  const {
    body
  } = await (0, _supertest.default)((0, _mockServer.default)(_thenBusboy.default)()).post("/").set("content-type", _mockHeader.default).field("subjects[0][firstName]", "John").field("subjects[0][lastName]", "Doe").field("subjects[0][dob][day]", "1").field("subjects[0][dob][month]", "Jan.").field("subjects[0][dob][year]", "1989").field("subjects[0][skills][0]", "Node.js").field("subjects[0][skills][1]", "CoffeeScript").field("subjects[0][skills][2]", "JavaScript").field("subjects[0][skills][3]", "Babel").field("subjects[1][firstName]", "Max").field("subjects[1][lastName]", "Doe").field("subjects[1][dob][day]", "12").field("subjects[1][dob][month]", "Mar.").field("subjects[1][dob][year]", "1992").field("subjects[1][skills][0]", "Python").field("subjects[1][skills][1]", "Flask").field("subjects[1][skills][2]", "JavaScript").field("subjects[1][skills][3]", "Babel").field("subjects[1][skills][4]", "React").field("subjects[1][skills][5]", "Redux");
  const expected = {
    subjects: [{
      firstName: "John",
      lastName: "Doe",
      dob: {
        day: 1,
        month: "Jan.",
        year: 1989
      },
      skills: ["Node.js", "CoffeeScript", "JavaScript", "Babel"]
    }, {
      firstName: "Max",
      lastName: "Doe",
      dob: {
        day: 12,
        month: "Mar.",
        year: 1992
      },
      skills: ["Python", "Flask", "JavaScript", "Babel", "React", "Redux"]
    }]
  };
  t.deepEqual(body, expected);
});
(0, _ava.default)("Should restore field type by default", async t => {
  t.plan(1);
  const {
    body
  } = await (0, _supertest.default)((0, _mockServer.default)(_thenBusboy.default)()).post("/").field("nullValue", "null").field("falseValue", "false").field("trueValue", "true").field("numberValue", "42").field("stringValue", "Some random string");
  const expected = {
    nullValue: null,
    falseValue: false,
    trueValue: true,
    numberValue: 42,
    stringValue: "Some random string"
  };
  t.deepEqual(body, expected);
});
(0, _ava.default)("Should not restore field type when options.restoreTypes turned to false", async t => {
  t.plan(1);
  const {
    body
  } = await (0, _supertest.default)((0, _mockServer.default)(_thenBusboy.default)({
    restoreTypes: false
  })).post("/").field("nullValue", "null").field("falseValue", "false").field("trueValue", "true").field("numberValue", "42").field("stringValue", "Some random string");
  const expected = {
    nullValue: "null",
    falseValue: "false",
    trueValue: "true",
    numberValue: "42",
    stringValue: "Some random string"
  };
  t.deepEqual(body, expected);
});
(0, _ava.default)("Should just receive file", async t => {
  t.plan(1);
  const dict = "/usr/share/dict/words";
  const {
    body
  } = await (0, _supertest.default)((0, _mockServer.default)(_thenBusboy.default)()).post("/").attach("file", dict);
  const expected = String((await (0, _promiseFs.readFile)(dict)));
  t.is(body.file, expected);
});
(0, _ava.default)("Should receive files and fields at the same time", async t => {
  t.plan(1);
  const {
    body
  } = await (0, _supertest.default)((0, _mockServer.default)(_thenBusboy.default)()).post("/").field("message[sender]", "John Doe").field("message[text]", "Whatever test message text").field("message[attachments][0][description]", "Some test file").attach("message[attachments][0][file]", __filename);
  const file = String((await (0, _promiseFs.readFile)(__filename)));
  const expected = {
    message: {
      sender: "John Doe",
      text: "Whatever test message text",
      attachments: [{
        description: "Some test file",
        file
      }]
    }
  };
  t.deepEqual(body, expected);
});
(0, _ava.default)("Should throw an error when no request object given", async t => {
  t.plan(3);
  const err = await t.throws((0, _thenBusboy.default)());
  t.true(err instanceof TypeError);
  t.is(err.message, "Request should be an instanceof http.IncomingMessage. Received undefined");
});
(0, _ava.default)("Should throw an error when request object is not an http.IncomingMessage", async t => {
  t.plan(3);
  const err = await t.throws((0, _thenBusboy.default)({}));
  t.true(err instanceof TypeError);
  t.is(err.message, "Request should be an instanceof http.IncomingMessage. Received object");
});
(0, _ava.default)("Should throw an error when given options is not a plain object", async t => {
  t.plan(3);
  const err = await t.throws((0, _thenBusboy.default)((0, _mockRequest.default)(), "totally not a plain object"));
  t.true(err instanceof TypeError);
  t.is(err.message, "Options should be an object. Received string");
});
(0, _ava.default)("Should response with an error when assignin a property to primitive value", async t => {
  t.plan(1);
  const {
    error
  } = await (0, _supertest.default)((0, _mockServer.default)(_thenBusboy.default)()).post("/").field("root[0]", "whatever").field("root[0][nop]", "oops");
  t.is(error.text, "TypeError: Cannot create property 'nop' on string 'whatever'");
});
(0, _ava.default)("Should response an error on incorrect field name format", async t => {
  t.plan(1);
  const format = "some[totally[]][wrong]format[foo]";
  const {
    error
  } = await (0, _supertest.default)((0, _mockServer.default)(_thenBusboy.default)()).post("/").field(format, "You shall not pass!");
  t.is(error.text, `Error: Unexpected name format of the field: ${format}`);
});
(0, _ava.default)("Should response an error on incorrect field name format of given file", async t => {
  t.plan(1);
  const format = "some[totally[]][wrong]format[foo]";
  const {
    error
  } = await (0, _supertest.default)((0, _mockServer.default)(_thenBusboy.default)()).post("/").attach(format, __filename);
  t.is(error.text, `Error: Unexpected name format of the field: ${format}`);
});