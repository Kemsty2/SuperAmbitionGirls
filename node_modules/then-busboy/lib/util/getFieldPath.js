"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _invariant = _interopRequireDefault(require("@octetstream/invariant"));

var _isString = _interopRequireDefault(require("./isString"));

var _getType = _interopRequireDefault(require("./getType"));

var _isNaN = _interopRequireDefault(require("./isNaN"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const format = /^([^[\]\n]+)(\[[^[\]]+\])*$/;
/**
 * Get a fild path
 *
 * @param {string} fieldname
 *
 * @return {Array<string|number>}
 *
 * @throws {TypeError} when given fieldname is not a string
 * @throws {Error} on unexpected fieldname format
 *
 * @example
 *
 * getFieldPath("foo[bar][baz]") // -> ["foo", "bar", "baz"]
 *
 * getFieldPath("foo") // -> ["foo"]
 *
 * getFieldPath("42") // -> [42]
 */

function getFieldPath(fieldname) {
  const res = [];
  (0, _invariant.default)(!(0, _isString.default)(fieldname), TypeError, "Field name should be a string. Received %s", (0, _getType.default)(fieldname));
  (0, _invariant.default)(!fieldname, "Field name cannot be empty.");
  (0, _invariant.default)(!format.test(fieldname), "Unexpected name format of the field: %s", fieldname);

  for (const element of fieldname.split("[")) {
    const key = element.endsWith("]") ? element.slice(0, -1) : element;
    res.push((0, _isNaN.default)(key) ? key : Number(key));
  }

  return res;
}

var _default = getFieldPath;
exports.default = _default;