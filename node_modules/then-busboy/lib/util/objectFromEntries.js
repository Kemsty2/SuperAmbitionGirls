"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isNaN = _interopRequireDefault(require("./isNaN"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @param {array|object} target
 * @param {array} path
 * @param {any} value
 *
 * @return {array|object}
 *
 * @api private
 */
function restoreObjectStructure(target, path, value) {
  const currentPath = path.shift();
  const curr = (0, _isNaN.default)(currentPath) ? {} : [];

  if (!target) {
    if (path.length === 0) {
      curr[currentPath] = value;
      return curr;
    }

    curr[currentPath] = restoreObjectStructure(curr[currentPath], path, value);
    return curr;
  }

  if (path.length === 0) {
    target[currentPath] = value;
    return target;
  }

  target[currentPath] = restoreObjectStructure(target[currentPath], path, value);
  return target;
}
/**
 * Create an object from given entries
 *
 * @param {array} entries
 *
 * @return {object}
 *
 * @api private
 *
 * @example
 *
 * const entries = [
 *   [
 *     ["name"], "John Doe"
 *   ],
 *   [
 *     ["age"], 25
 *   ],
 *   [
 *     ["gender"], "Male"
 *   ]
 * ]
 *
 * objectFromEntries(entries) // -> {name: "John Doe", age: 25, gender: "Male"}
 */


function objectFromEntries(entries) {
  const res = {};

  for (const [path, value] of entries) {
    const root = path.shift();

    if (path.length < 1) {
      res[root] = value;
    } else {
      res[root] = restoreObjectStructure(res[root], path, value);
    }
  }

  return res;
}

var _default = objectFromEntries;
exports.default = _default;